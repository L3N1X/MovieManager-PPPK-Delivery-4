@model MovieManager.PPPK4.EntityFramework.Model.Movie

@{
    ViewBag.Title = "Edit";

    SelectList ddlPersonSource = new SelectList(
        items: new MovieManager.PPPK4.EntityFramework.MovieContext().People,
        dataTextField: nameof(MovieManager.PPPK4.EntityFramework.Model.Person.FullName),
        dataValueField: nameof(MovieManager.PPPK4.EntityFramework.Model.Person.Id));
}

<h2>Edit</h2>


@using (Html.BeginForm("Edit", "Movie", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Movie</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id, new { id = "hdnMovieId" })

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PublishedDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PublishedDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PublishedDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Director", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList(optionLabel: "Choose a director", selectList: ddlPersonSource, name: "DirectorId", htmlAttributes: new { @class = "form-control", value = Model.DirectorId })
            @Html.ValidationMessageFor(model => model.DirectorId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Add actor", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10" style="display:flex; justify-content:flex-start; align-items:center;">
            @Html.DropDownList(optionLabel: "Choose an actor", selectList: ddlPersonSource, name: "ActorId", htmlAttributes: new { @class = "form-control", id = "ddlActors" })
            <button type="button" class="btn btn-primary" id="btnAddActor">+</button>
        </div>
    </div>

    <div class="form-group">
        @{ int count = 1;} 
        @foreach (var actor in Model.Actors)
        {
            @Html.Label("Actor " + count, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" style="display:flex; justify-content:flex-start; align-items:center;">
                <input type="text" value="@actor.FullName" disabled class="form-control" />
                <button type="button" onclick="removeActor(@actor.Id)" class="btn btn-danger" id="btnRemoveActor">X</button>
            </div>
            count++;
        }
    </div>

    <div class="form-group">
        @Html.Label("Picture", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <input type="file" id="picture" multiple accept="image/*" name="files" />
        </div>
    </div>

    @foreach (var asset in Model.Assets)
    {
        <div class="form-group">
            <span class="control-label col-md-2">
                @asset.Name <br />
                @Ajax.ActionLink("Delete", "Delete", "Asset", new { assetId = asset.Id, movieId = Model.Id }, new AjaxOptions { HttpMethod = "Post" })
            </span>
            <div class="col-md-10">
                <img src="~/Asset?id=@asset.Id" alt="Picture" width="300" height="200" loading="lazy" />
            </div>
        </div>
    }

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {

    <script>

        const btnAddActor = document.getElementById('btnAddActor');

        btnAddActor.addEventListener('click', () => {

            const movie = document.getElementById('hdnMovieId').value;
            const actor = document.getElementById('ddlActors').value

            const data = {
                movieId: movie,
                actorId: actor
            };

            fetch('/Movie/AddActor', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    location.reload();
                })
                .catch((error) => {
                    alert('You need to select an actor to add!');
                })

        });

        function removeActor(actorId) {
            const movie = document.getElementById('hdnMovieId').value;
            const data = {
                movieId: movie,
                actorId: actorId
            };
            fetch('/Movie/RemoveActor', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json)
                .then(data => {
                    location.reload();
                })
                .catch(error => {
                    alert('Failed to remove selected actor, sorry');
                })
        }


    </script>


    @Scripts.Render("~/bundles/jqueryval")

}
